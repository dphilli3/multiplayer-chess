{"ast":null,"code":"var _jsxFileName = \"/Users/dakotaphillips/Desktop/multiplayer-chess/client/src/InitGame.js\",\n  _s = $RefreshSig$();\nimport { Button, Stack, TextField } from \"@mui/material\";\nimport { useState } from \"react\";\nimport CustomDialog from \"./components/CustomDialog\";\nimport socket from \"./socket\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function InitGame({\n  setRoom,\n  setOrientation,\n  setPlayers\n}) {\n  _s();\n  const [roomDialogOpen, setRoomDialogOpen] = useState(false);\n  const [roomInput, setRoomInput] = useState(''); // input state\n  cont[(roomError, setRoomError)] = useState('');\n  return /*#__PURE__*/_jsxDEV(Stack, {\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    sx: {\n      py: 1,\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(CustomDialog, {\n      open: roomDialogOpen,\n      handleClose: () => setRoomDialogOpen(false),\n      title: \"Select Room to Join\",\n      contentText: \"Enter a valud room ID to join the room\",\n      handleContinue: () => {\n        //join a room\n        if (!roomInput) return;\n        socket.emit(\"joinRoom\", {\n          roomId: roomInput\n        }, r => {\n          // r is the response from the server\n          if (!r.error) return setRoomError(r.message);\n          console.log(\"response:\", r);\n          setRoom(r === null || r === void 0 ? void 0 : r.roomId); //set room to the room ID\n          setPlayers(r === null || r === void 0 ? void 0 : r.players); //set players to the array of players in the room\n          setOrientation(\"black\"); // set orientation as black\n          setRoomDialogOpen(false); //close dialog\n        });\n      },\n      children: /*#__PURE__*/_jsxDEV(TextField, {\n        autoFocus: true,\n        margin: \"dense\",\n        id: \"room\",\n        label: \"Room ID\",\n        name: \"room\",\n        value: roomInput,\n        required: true,\n        onChange: e => setRoomInput(e.target.value),\n        type: \"text\",\n        fullWidth: true,\n        variant: \"standard\",\n        error: Boolean(roomError),\n        helperText: !roomError ? 'Enter a room ID' : `Invalid room ID: ${roomError}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: () => {\n        //create a room\n        socket.emit(\"createRoom\", r => {\n          console.log(r);\n          setRoom(r);\n          setOrientation(\"white\");\n        });\n      },\n      children: \"Start a game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => {\n        setRoomDialogOpen(true);\n      },\n      children: \"Join a Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, this);\n}\n_s(InitGame, \"B/CMj8fLt31WAaNZla8fB+JuMYU=\");\n_c = InitGame;\nvar _c;\n$RefreshReg$(_c, \"InitGame\");","map":{"version":3,"names":["Button","Stack","TextField","useState","CustomDialog","socket","jsxDEV","_jsxDEV","InitGame","setRoom","setOrientation","setPlayers","_s","roomDialogOpen","setRoomDialogOpen","roomInput","setRoomInput","cont","roomError","setRoomError","justifyContent","alignItems","sx","py","height","children","open","handleClose","title","contentText","handleContinue","emit","roomId","r","error","message","console","log","players","autoFocus","margin","id","label","name","value","required","onChange","e","target","type","fullWidth","variant","Boolean","helperText","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/dakotaphillips/Desktop/multiplayer-chess/client/src/InitGame.js"],"sourcesContent":["import { Button, Stack, TextField } from \"@mui/material\";\nimport { useState } from \"react\";\nimport CustomDialog from \"./components/CustomDialog\";\nimport socket from \"./socket\";\n\nexport default function InitGame({ setRoom, setOrientation, setPlayers }) {\n    const [roomDialogOpen, setRoomDialogOpen] = useState(false);\n    const [roomInput, setRoomInput] = useState(''); // input state\n    cont [roomError, setRoomError] = useState('');\n\n    return (\n        <Stack\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            sx={{ py: 1, height: \"100vh\" }}\n        >\n            <CustomDialog\n                open={roomDialogOpen}\n                handleClose={() => setRoomDialogOpen(false)}\n                title=\"Select Room to Join\"\n                contentText=\"Enter a valud room ID to join the room\"\n                handleContinue={() => {\n                    //join a room\n                    if (!roomInput) return;\n                    socket.emit(\"joinRoom\", { roomId: roomInput }, (r) => {\n                        // r is the response from the server\n                        if (!r.error) return setRoomError(r.message);\n                        console.log(\"response:\", r);\n                        setRoom(r?.roomId); //set room to the room ID\n                        setPlayers(r?.players); //set players to the array of players in the room\n                        setOrientation(\"black\"); // set orientation as black\n                        setRoomDialogOpen(false); //close dialog\n                    });\n                }}\n            >\n                <TextField\n                autoFocus\n                margin=\"dense\"\n                id=\"room\"\n                label=\"Room ID\"\n                name=\"room\"\n                value={roomInput}\n                required\n                onChange={(e) => setRoomInput(e.target.value)}\n                type=\"text\"\n                fullWidth\n                variant=\"standard\"\n                error={Boolean(roomError)}\n                helperText={!roomError ? 'Enter a room ID' : `Invalid room ID: ${roomError}` }\n                />\n            </CustomDialog>\n            {/* Button for starting game */}\n            <Button\n                variant=\"contained\"\n                onClick={() => {\n                    //create a room\n                    socket.emit(\"createRoom\", (r) => {\n                        console.log(r);\n                        setRoom(r);\n                        setOrientation(\"white\");\n                    });\n                }}\n            >\n                Start a game\n            </Button>\n            {/* Button for joining a game */}\n            <Button\n                onClick={() => {\n                    setRoomDialogOpen(true)\n                }}\n            >\n                Join a Game\n            </Button>\n        </Stack>\n    );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}