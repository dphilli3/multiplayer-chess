{"ast":null,"code":"var _jsxFileName = \"/Users/dakotaphillips/Desktop/multiplayer-chess/client/src/Game.js\",\n  _s = $RefreshSig$();\nimport { useState, useMemo, useCallback, useEffect } from \"react\";\nimport { Chessboard } from \"react-chessboard\";\nimport { Chess } from \"chess.js\";\nimport CustomDialog from \"./components/CustomDialog\";\nimport socket from \"./socket\";\nimport { Card, CardContent, List, ListItem, ListItemText, ListSubheader, Stack, Typography, Box } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Game({\n  players,\n  room,\n  orientation,\n  cleanup\n}) {\n  _s();\n  const chess = useMemo(() => new Chess(), []); // <- 1\n  const [fen, setFen] = useState(chess.fen()); // <- 2\n  const [over, setOver] = useState(\"\");\n  const makeAMove = useCallback(move => {\n    try {\n      const result = chess.move(move); //Update chess instance\n      setFen(chess.fen()); // update fen state to trigger re-render\n\n      console.log(\"over, checkmate\", chess.isGameOver(), chess.isCheckmate());\n      if (chess.isGameOver()) {\n        // check if move lead to \"game over\"\n        if (chess.isCheckmate()) {\n          //if reason for game over is a checkmate\n          //Set message to checkmate.\n          setOver(`Checkmate! ${chess.turn() === \"w\" ? \"black\" : \"white\"} wins!`);\n          // The winner is determined by checking which side made the last move\n        } else if (chess.isDraw()) {\n          // if it is a draw\n          setOver(\"Draw\");\n        } else {\n          setOver(\"Game over\");\n        }\n      }\n      return result;\n    } catch (e) {\n      return null;\n    } // null if the move was illegal, the move object if the move was legal\n  }, [chess]);\n  function onDrop(sourceSquare, targetSquare) {\n    //orientation is either 'white' or 'black'. game.turn() returns 'w' or 'b'\n    if (chess.turn() !== orientation[0]) return false; // <- prohibit player from moving\n\n    if (players.length < 2) return false; // <-2 disallow a move if the opponent has not joined\n\n    const moveData = {\n      from: sourceSquare,\n      to: targetSquare,\n      color: chess.turn(),\n      promotion: \"q\" // promote to queen where possible\n    };\n\n    const move = makeAMove(moveData);\n\n    //illegal move\n    if (move === null) return false;\n    socket.emit(\"move\", {\n      // <- 3 emit a move event\n      move,\n      room\n    }); // this event will be transmitted to the opponent via the server\n\n    return true;\n  } // <- 3\n\n  useEffect(() => {\n    socket.on(\"move\", move => {\n      makeAMove(move);\n    });\n  }, [makeAMove]);\n\n  //game component returned jsx\n  return /*#__PURE__*/_jsxDEV(Stack, {\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          children: [\"Room ID: \", room]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Stack, {\n      flexDirection: \"row\",\n      sx: {\n        pt: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        style: {\n          maxWidth: 600,\n          maxHeight: 600,\n          flexGrow: 1\n        },\n        children: /*#__PURE__*/_jsxDEV(Chessboard, {\n          position: fen,\n          onPieceDrop: onDrop,\n          boardOrientation: orientation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), players.length > 0 && /*#__PURE__*/_jsxDEV(Box, {\n        children: /*#__PURE__*/_jsxDEV(List, {\n          children: [/*#__PURE__*/_jsxDEV(ListSubheader, {\n            children: \"Players\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 29\n          }, this), players.map(p => /*#__PURE__*/_jsxDEV(ListItem, {\n            children: /*#__PURE__*/_jsxDEV(ListItemText, {\n              primary: p.username\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 37\n            }, this)\n          }, p.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 33\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CustomDialog // <- 5\n    , {\n      open: Boolean(over),\n      title: over,\n      contentText: over,\n      handleContinue: () => {\n        setOver(\"\");\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n}\n_s(Game, \"JjGmntZkyHtS2UMYHCFtrIX5sco=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["useState","useMemo","useCallback","useEffect","Chessboard","Chess","CustomDialog","socket","Card","CardContent","List","ListItem","ListItemText","ListSubheader","Stack","Typography","Box","jsxDEV","_jsxDEV","Game","players","room","orientation","cleanup","_s","chess","fen","setFen","over","setOver","makeAMove","move","result","console","log","isGameOver","isCheckmate","turn","isDraw","e","onDrop","sourceSquare","targetSquare","length","moveData","from","to","color","promotion","emit","on","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","flexDirection","sx","pt","className","style","maxWidth","maxHeight","flexGrow","position","onPieceDrop","boardOrientation","map","p","primary","username","id","open","Boolean","title","contentText","handleContinue","_c","$RefreshReg$"],"sources":["/Users/dakotaphillips/Desktop/multiplayer-chess/client/src/Game.js"],"sourcesContent":["import { useState, useMemo, useCallback, useEffect } from \"react\";\nimport { Chessboard } from \"react-chessboard\";\nimport { Chess } from \"chess.js\";\nimport CustomDialog from \"./components/CustomDialog\";\nimport socket from \"./socket\";\nimport { Card, CardContent, List, ListItem, ListItemText, ListSubheader, Stack, Typography, Box } from \"@mui/material\";\n\n\nfunction Game({players, room, orientation, cleanup }) {\n    const chess = useMemo(() => new Chess(), []); // <- 1\n    const [fen, setFen] = useState(chess.fen()); // <- 2\n    const [over, setOver] = useState(\"\");\n\n    const makeAMove = useCallback(\n        (move) => {\n            try {\n                const result = chess.move(move); //Update chess instance\n                setFen(chess.fen()); // update fen state to trigger re-render\n\n                console.log(\"over, checkmate\", chess.isGameOver(), chess.isCheckmate());\n\n                if(chess.isGameOver()) { // check if move lead to \"game over\"\n                    if (chess.isCheckmate()) { //if reason for game over is a checkmate\n                    //Set message to checkmate.\n                        setOver(\n                            `Checkmate! ${chess.turn() === \"w\" ? \"black\" : \"white\"} wins!`\n                        );\n                            // The winner is determined by checking which side made the last move\n                    } else if (chess.isDraw()) { // if it is a draw\n                        setOver(\"Draw\");\n                    } else {\n                        setOver(\"Game over\");\n                    }\n                }\n\n                return result;\n            } catch (e) {\n                return null;\n            } // null if the move was illegal, the move object if the move was legal\n        },\n        [chess]\n    );\n\n    function onDrop(sourceSquare, targetSquare) {\n\n        //orientation is either 'white' or 'black'. game.turn() returns 'w' or 'b'\n        if (chess.turn() !== orientation[0]) return false; // <- prohibit player from moving\n\n        if (players.length < 2) return false; // <-2 disallow a move if the opponent has not joined\n\n        const moveData = {\n            from: sourceSquare,\n            to: targetSquare,\n            color: chess.turn(),\n            promotion: \"q\", // promote to queen where possible\n        };\n\n        const move = makeAMove(moveData);\n\n        //illegal move\n        if (move === null) return false;\n\n        socket.emit(\"move\", { // <- 3 emit a move event\n            move,\n            room,\n        }); // this event will be transmitted to the opponent via the server\n\n        return true;\n    } // <- 3\n\n    useEffect(() => {\n        socket.on(\"move\", (move) => {\n            makeAMove(move);\n        });\n    }, [makeAMove]);\n\n        //game component returned jsx\n    return (\n        <Stack>\n            <Card>\n                <CardContent>\n                    <Typography variant=\"h5\">Room ID: {room}</Typography>\n                </CardContent>\n            </Card>\n            <Stack flexDirection=\"row\" sx={{ pt: 2}}>\n                <div className=\"board\" style={{\n                    maxWidth: 600,\n                    maxHeight: 600,\n                    flexGrow: 1,\n                }}>\n                    <Chessboard\n                        position={fen}\n                        onPieceDrop={onDrop}\n                        boardOrientation={orientation}\n                    />\n                </div>\n                {players.length > 0 && (\n                    <Box>\n                        <List>\n                            <ListSubheader>Players</ListSubheader>\n                            {players.map((p) => (\n                                <ListItem key={p.id}>\n                                    <ListItemText primary={p.username} />\n                                </ListItem>\n                            ))}\n                        </List>\n                    </Box>\n                )}\n            </Stack>\n            <CustomDialog // <- 5\n                open={Boolean(over)}\n                title = {over}\n                contentText={over}\n                handleContinue={() => {\n                    setOver(\"\");\n                }}\n            />\n        </Stack>\n    );\n}\n\nexport default Game;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}